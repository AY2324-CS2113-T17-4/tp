@startuml
'https://plantuml.com/sequence-diagram

'autonumber
'autoactivate on


actor Student

participant ":TimetableView" as TV

participant "currentDayEvents\n:ArrayList<Event>" as CDE #white

participant "moduleService\nController\n:ModuleService\nController" as MSC #white

box "Model" #LightBlue
participant "student:\nStudent" as S #white
participant "timetable:\nTimetable" as T #white
end box

activate S

opt timetableCommandWord == "SHOW"
    'timetable.getCurrentSemesterModulesWeekly()
    S -> T: getCurrent\nSemester\nModulesWeekly()
    activate T
    T --> S: currentSem\nModulesWeekly
    deactivate T

    S -> MSC: showTimetable\n(currentSem\nModulesWeekly)
    activate MSC


    MSC -> TV: printTimetable(currentSemesterModuleWeekly);
    activate TV

    'createDailyEvents(currentSemesterModules)
    TV -> TV: createDailyEvents(ArrayList<ModuleWeekly> \ncurrentSemesterModules)
    activate TV
    note left
    createDailyEvents converts
    the ArrayList<ModuleWeekly>
    to a List of ArrayList<Events>
    for different days
    end note
    TV --> TV: List<ArrayList<Event>> weeklyTimetableByDay
    deactivate TV


    loop currentDayEvents
        TV -> TV: sortByTime(ArrayList<Event> currentDayEvents)
        activate TV
        note left
        sortByTime sorts Events
        in currentDayEvents by
        start time, duration,
        then module code, in
        ascending order
        end note
        TV --> TV: ArrayList<Event> currentDayEvents (sorted)
        deactivate TV
    end

    TV -> TV: printTimetableHeader()
    activate TV
    TV --> Student: display Timetable Header
    TV --> TV
    deactivate TV

    loop day
    TV -> TV: printlnHorizontalLine()
    activate TV
    TV --> Student: display Horizontal Line
    TV --> TV
    deactivate TV

    TV -> CDE: weeklyTimetableByDay.get(day)
    CDE --> TV: ArrayList<Event> currentDayEvents

    TV -> TV: printCurrentDayEvents(ArrayList<Event> \ncurrentDayEvents, day)
    activate TV
    TV --> Student: display the day's events
    TV --> TV:
    deactivate TV
    end

    TV -> TV: printlnHorizontalLine()
    activate TV
    TV --> Student: display Horizontal Line
    TV --> TV
    deactivate TV


    TV --> MSC
    destroy TV
    MSC --> S
    deactivate MSC
end



@enduml